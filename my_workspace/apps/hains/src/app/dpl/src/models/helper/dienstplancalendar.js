import {
  endOfMonth,
  formatDate,
  getVerteilerDates,
  lastDayOfWeek,
  startDayOfWeek,
  startOfMonth
} from '../../tools/dates';
import { returnError } from '../../tools/hains';
import {
  apiGetDienstplaene,
  getMonatsplanungQueryParams
} from '../../tools/helper';
import Calendar from './calendar';

class DienstplanCalendar extends Calendar {
  constructor(pageName, appModel, view) {
    super(appModel, view);
    this.showViews = false;
    this.pageName = pageName;
    this.refresh = false;
    this.cache = true;
    this.calendarDienstplanIds = {};
    this.dienstplanMonth = {
      start: null,
      end: null
    };
    this.vorschlag = true;
    this.dienstplaene = [];
    this.setTag(this.day);
    this.state = {};
    this.showOnlyAutoGeneratedPlan = false;
  }

  toggleShowOnlyAutoGeneratedPlan() {
    this.showOnlyAutoGeneratedPlan = !this.showOnlyAutoGeneratedPlan;
    this.update('updateDienstplanAuswahl');
  }

  setTag(tag) {
    this.tag = formatDate(tag);
  }

  toggleRefresh() {
    this.refresh = !this.refresh;
    this.update('updateDienstplanAuswahl');
  }

  toggleCache() {
    this.cache = !this.cache;
    this.update('updateDienstplanAuswahl');
  }

  toggleVorschlag() {
    this.vorschlag = !this.vorschlag;
    this.update('updateDienstplanAuswahl');
  }

  addIdsToCalendarDienstplan(val, anfang) {
    const id = parseInt(val, 10);
    this.calendarDienstplanIds[anfang] = id;
    this.update('updateDienstplanAuswahl');
  }

  hasSomeDienstplanForAnfang(anfang) {
    return !!this.calendarDienstplanIds[anfang];
  }

  hasDienstplan(anfang, id) {
    const idInt = parseInt(id, 10);
    return this.calendarDienstplanIds[anfang] === idInt;
  }

  getDienstplan(anfang) {
    return this?._appModel?.getDienstplan?.(anfang);
  }

  getCacheDienstplanIds(day) {
    const dates = getVerteilerDates(day, this.pageName);
    const dienstplan_ids = [];
    dates.anfaenge.forEach((anfang) => {
      const dienstplan = this.getDienstplan(anfang);
      if (dienstplan) {
        dienstplan_ids.push(parseInt(dienstplan.id, 10));
      }
    });
    return dienstplan_ids;
  }

  /**
   * Lädt die Dienstpläne für den Monat
   * @param {String|Date} day
   * @param {String} view
   * @param {Funktion} callback
   */
  getDienstplaene(day, view, callback = false) {
    let start = startOfMonth(day);
    let end = endOfMonth(day);

    if (view === 'week') {
      const endOfWeek = lastDayOfWeek(day);
      const startWeek = startDayOfWeek(day);
      end = endOfMonth(endOfWeek);
      start = startOfMonth(startWeek);
    }
    // Nur Dienstpläne laden, nur bei neuen Monaten
    if (
      this.dienstplanMonth.start?.toDateString?.() ===
        start?.toDateString?.() &&
      this.dienstplanMonth.end?.toDateString?.() === end?.toDateString?.()
    ) {
      this.update('updateDienstplanAuswahl');
      if (this._isFunction(callback)) callback(this.dienstplaene);
      return this.dienstplaene;
    }
    apiGetDienstplaene(
      {
        anfang: formatDate(start),
        ende: formatDate(end)
      },
      (dienstplaene) => {
        this.dienstplaene = dienstplaene;
        this.dienstplanMonth = {
          start,
          end
        };
        dienstplaene.forEach((dienstplan) => {
          const anfang = dienstplan.check_anfang_ende.anfang;
          if (!this.hasSomeDienstplanForAnfang(anfang)) {
            this.addIdsToCalendarDienstplan(dienstplan.id, anfang);
          }
        });
        if (this._isFunction(callback)) callback(this.dienstplaene);
        this.update('updateDienstplanAuswahl');
      },
      returnError
    );
  }

  /**
   * Wenn der Monatsplan im Cache ist,
   * der Cache aktiviert ist und
   * keine Aktualisierung erzwungen wird
   * wird der Monatsplan aus dem Cache geladen.
   * Ansonsten wird der Monatsplan von der API geladen.
   * @param {String} anfang
   * @returns Object
   */
  getMonatsplan(anfang) {
    const start = formatDate(startOfMonth(anfang));
    if (!this.calendarDienstplanIds[start]) {
      console.error(
        'Kein Dienstplan ausgewählt.',
        this.calendarDienstplanIds,
        start
      );
      return;
    }
    const params = getMonatsplanungQueryParams({
      anfang: start,
      dienstplan_id: this.calendarDienstplanIds[start] || 0,
      force_refresh_bedarf: this.refresh,
      vorschlag: this.vorschlag
    });
    const cachedDienstplan =
      !this.refresh &&
      this.cache &&
      this?._appModel?.getDienstplan?.(params.anfang);
    const isInCache = cachedDienstplan?.id === params.dienstplan_id;
    const dienstplan =
      isInCache && cachedDienstplan
        ? cachedDienstplan
        : this?._hains?.api?.('monatsplanung', 'get', params);
    return {
      dienstplan,
      params
    };
  }

  /**
   * Location updaten, wenn sich Tag, Woche oder Monat geändert hat
   * @param {String} date
   * @returns True, wenn sich der Tag, die Woche oder der Monat geändert hat oder kein Dienstplan ausgewählt ist
   */
  dateLocationChanged(date) {
    if (!this.checkIsDateString(date)) return false;
    const hasNoDienstplaene = !this?.dienstplaene?.length;
    const changedDate = super.dateLocationChanged(date);
    return changedDate || hasNoDienstplaene;
  }

  /**
   * Fügt dem State ein Key-Value-Paar hinzu
   * @param {String|Number} key
   * @param {Any} value
   */
  addToState(key, value) {
    this.state[key] = value;
  }

  /**
   * @param {String} key
   * @returns Eintrag aus dem State
   */
  getFromState(key) {
    return this.state[key];
  }

  /**
   * Löscht den State
   */
  clearState() {
    this.state = {};
  }
}

export default DienstplanCalendar;
