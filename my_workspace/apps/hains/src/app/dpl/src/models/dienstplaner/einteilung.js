import { addMonths, toDate } from "../../tools/dates";
import Einteilung from "../apimodels/einteilung";

class DienstplanerDataEinteilung extends Einteilung {
  constructor(obj, appModel = false, preventExtension = true) {
    super(obj, appModel, false);
    if (preventExtension) this._preventExtension();
  }

  /**
   * Nur bestimmte Einteilungen sollen überschrieben werden
   */
  get writable() {
    const writableDienst = this?.dienst?.writable;
    const writableDate = this?.date?.writable;
    const writableMitarbeiter = this?.mitarbeiter?.writable
      ? this.mitarbeiter.writable(this.tag, this.po_dienst_id) : true;
    return writableDienst && writableDate && writableMitarbeiter;
  }

  /**
   * True, wenn die Einteilung zu einem Josti-Dienstplan gehört
   */
  get isJosti() {
    return !!(this.counts && this.public && this.einteilungsstatus?.sys)
  }

  /**
   * Vorschläge und Counts-Einteilungen sollen angezeigt werden
   */
  get show() {
    if(this?._state?.calendar?.showOnlyAutoGeneratedPlan && this.dienstplan_id !== this?._id) {
      // -> counts, wenn sie 2 Monate vor Dienstplanbeginn eingeteilt wurden (created_at) und zu Josti gehören
      const anfang = addMonths(this?._anfang?.str || "", -2).getTime();
      const created = toDate(this.created_at.split("T")[0]).getTime();
      // console.log(anfang, created, this, this?._anfang, created < anfang);
      return this.isJosti && created < anfang;
    }
    const show = this.counts || (this.vorschlag && this.dienstplan_id === this?._id);
    return !!show;
  }

  /**
   * Id für einen Debounce
   */
  get debounceId() {
    return `${this.tag}_${this.po_dienst_id}_${this.bereich_id}`;
  }

  /**
   * Einteilung des Dienstplans
   */
  get prev() {
    return this.dienstplan_id === this?._id;
  }

  /**
   * Liefert das byDienst
   */
  get byDienst() {
    return this?.date?.getDienstEl?.(this.po_dienst_id);
  }

  /**
   * Liefert das byDienst
   */
  get byMitarbeiter() {
    return this?.date?.getMitarbeiterEl?.(this.mitarbeiter_id);
  }

  /**
   * Liefert das byDienstBereich-Element
   */
  get byDienstBereich() {
    return this?.date?.getBereich?.(this.po_dienst_id, this.bereich_id);
  }

  /**
   * Liefert alle Einteilungen für den Tag, Bereich und Dienst
   */
  get einteilungen() {
    return this?.byDienstBereich?.einteilungen || [];
  }

  /**
   * Entfernt die Einteilung komplett
   */
  completeRemove() {
    if (this.feld?.remove) this.feld.remove(false);
    else this.remove();
    this.updateCachedDienstplan();
  }

  /**
   * Führt ein Update des gecachten Dienstplans durch.
   */
  updateCachedDienstplan() {
    this?._appModel?.updateCachedDienstplaeneEinteilung?.(this._me);
  }
}

export default DienstplanerDataEinteilung;
