import React, { useEffect } from 'react';
import { formatDate, getMonth } from '../../../tools/dates';
import { UseRegisterKey } from '../../../hooks/use-register';
import Radio from './Radio';
import { UseDropdown } from '../../../hooks/use-dropdown';

function DienstplanAuswahl({
  dateUpdated,
  calendar,
  showAutoPlan = false,
  children
}) {
  UseRegisterKey(
    'updateDienstplanAuswahl',
    calendar.push,
    calendar.pull,
    calendar
  );
  const { show, handleClick, caret } = UseDropdown(false, false);
  const dienstplaene = calendar.dienstplaene;

  useEffect(() => {
    if (calendar) {
      dateUpdated(calendar.selectedDay, calendar.view);
    }
  }, [calendar]);

  const bedarf = () => {
    calendar.toggleRefresh();
  };

  const cache = () => {
    calendar.toggleCache();
  };

  const autoPlan = () => {
    calendar.toggleShowOnlyAutoGeneratedPlan();
  };

  const plan = (e, anfang) => {
    calendar.addIdsToCalendarDienstplan(e.target.value, anfang);
  };

  const getRadioButtons = () => {
    const result = {};
    const ids = {};
    const dienstplan_ids = calendar?.getCacheDienstplanIds?.(
      formatDate(calendar.selectedDay)
    );
    // Index des Dienstplans speichern, der in dem Cache existiert
    dienstplan_ids?.forEach?.((id) => {
      const index = dienstplaene.findIndex((dpl) => dpl.id === id);
      if (index >= 0) {
        ids[dienstplaene[index].check_anfang_ende.anfang] = index;
      }
    });
    // Index des Dienstplans speichern, der in dem Kalender ausgewählt wurde
    Object.values(calendar.calendarDienstplanIds).forEach((id) => {
      const index = dienstplaene.findIndex((dpl) => dpl.id === id);
      if (index >= 0) {
        ids[dienstplaene[index].check_anfang_ende.anfang] = index;
      }
    });
    dienstplaene.forEach((dienstplan, i) => {
      const anfang = dienstplan.check_anfang_ende.anfang;
      const key = `${dienstplan.name}-${dienstplan.id}`;
      if (!result[anfang]) {
        // Wenn weder ein ausgewählter, noch ein gecachter Dienstplan auf die Liste zutrifft,
        // dann den ersten Dienstplan aus der Liste auswählen
        if (ids[anfang] === undefined) {
          ids[anfang] = i;
        }
        result[anfang] = {
          legend: <legend key={`${key}-legend`}>{getMonth(anfang)}:</legend>,
          liste: [],
          fieldset: false
        };
        result[anfang].fieldset = (
          <fieldset key={key}>
            {result[anfang].legend}
            {result[anfang].liste}
          </fieldset>
        );
      }
      result[anfang].liste.push(
        <Radio
          key={`${key}-radio`}
          dienstplan={dienstplan}
          onChange={(e) => plan(e, anfang)}
          getChecked={ids[anfang] === i}
          anfang={anfang}
        />
      );
      // Gecheckten dienstplan als Auswahl in den Kalender übernehmen
      // Wenn dort noch keine Auswahl getroffen wurde
      if (!calendar.calendarDienstplanIds[anfang] && ids[anfang] === i) {
        calendar.addIdsToCalendarDienstplan(dienstplan.id, anfang);
      }
    });

    return Object.values(result).map((obj) => obj.fieldset);
  };

  return (
    <div className="choose">
      <div className="dienstplaene columns">{getRadioButtons()}</div>
      <div className="einstellungen columns">
        <p onClick={handleClick}>
          Einstellungen <span>{caret}</span>
        </p>
        {show ? (
          <>
            <fieldset>
              <label
                htmlFor="bedarf-update"
                title="Aktualisiert die Bedarfe für den ausgewählten Dienstplan."
              >
                <input
                  id="bedarf-update"
                  type="checkbox"
                  value="Cache"
                  checked={calendar.refresh}
                  name="bedarf-update"
                  onChange={bedarf}
                />
                Bedarfe aktualisieren
              </label>
            </fieldset>
            {showAutoPlan && (
              <fieldset>
                <label
                  htmlFor="is-auto-plan"
                  title="Die Einteilungen werden nach zum Plan zugehörigen Einteilungen gefilter."
                >
                  <input
                    id="is-auto-plan"
                    type="checkbox"
                    value="Cache"
                    checked={calendar.showOnlyAutoGeneratedPlan}
                    name="is-auto-plan"
                    onChange={autoPlan}
                  />
                  Auto Plan
                </label>
              </fieldset>
            )}
            <fieldset>
              <label
                htmlFor="dienstplan-auswahl-cache"
                title="Cache aktivieren/deaktivieren."
              >
                <input
                  id="dienstplan-auswahl-cache"
                  type="checkbox"
                  value="Bedarf"
                  checked={calendar.cache}
                  name="cache"
                  onChange={cache}
                />
                Cache
              </label>
            </fieldset>
            {children ? <fieldset>{children}</fieldset> : null}
          </>
        ) : null}
      </div>
    </div>
  );
}

export default DienstplanAuswahl;
